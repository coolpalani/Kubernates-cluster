---

# Ubuntu node Setup for Kubernates clsuster

- name: Setup system hostname of Kubernates nodes
  command: hostnamectl set-hostname {{ inventory_hostname }}
  register: kubernates_hostname
  tags:
    - setup-hostname

- name: Update hosts file of Kubernates nodes
  template:
    src: hosts_file.j2
    dest: /etc/hosts
    backup: yes
    owner: root
    group: root
    mode: 0644
  tags:
    - update_hosts_file

- name: Install ntp packages
  apt: name=ntp state=latest update_cache=yes

- name: Start ntp Service
  service: name=ntp state=started enabled=yes

- name: Configure External Interface IP address
  template:
    src: ext_interface_ip.j2
    dest: /etc/network/interfaces
    backup: yes
    owner: root
    group: root
    mode: 0644
  register: knode_ip_conf
  tags:
    - knode_if_ip

- name: Reload network service
  service: name=networking state=restarted
  until: knode_ip_conf | success
  register: net_srv
  tags:
    - restart_net_srv

# Installing Kubernetes using kubeadm tool

- name: Update Cache
  apt: update_cache=yes

- name: Download GnuPG Key for secure communication
  shell: curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -

- name: Specifying Kubernetes repository into sources list
  apt_repository: repo='deb http://apt.kubernetes.io/ kubernetes-xenial main' state=present update_cache=yes

- name: Install Docker, Kubelet, Kubeadm, Kubectl and Kuberenetes-cni
  apt: name={{ item }} state=latest update_cache=yes
  with_items:
    - docker.io
    - kubelet
    - kubeadm
    - kubectl
    - kubernetes-cni
  tags:
    - install_pkgs

# Initializing master

- name: Initializing master
  shell: kubeadm init --skip-preflight-checks > /tmp/key_info
  when: inventory_hostname == "{{knode1_hostname}}"
  register: master_init
  tags:
    - master_node_init

- name: Check master Initialization details
  command: cat /tmp/key_info
  when: inventory_hostname == "{{knode1_hostname}}"
  register: key_info

- debug: var=key_info.stdout
  when: inventory_hostname == "{{knode1_hostname}}"

- name: Storing token
  shell: tail -1 /tmp/key_info > /tmp/token.sh
  when: inventory_hostname == "{{knode1_hostname}}"

- name: Add "--skip-preflight-checks" to token
  shell: sed -i 's/{{k_node1}}/{{k_node1}} --skip-preflight-checks/' /tmp/token.sh
  when: inventory_hostname == "{{knode1_hostname}}"

- name: Fetch token
  fetch:
    src: /tmp/token.sh
    dest: /tmp/
    flat: yes
  when: inventory_hostname == "{{knode1_hostname}}"
  register: fetch_token
  tags:
    - fetch_registration_token

# Installing pod network add-on in master to communicate pods with each other

- name: Installing a pod network
  command: kubectl apply -f https://git.io/weave-kube
  when: ansible_nodename == "{{knode1_hostname}}"
  register: intall_pod_net
  tags: install_podnet-master

- name: Check pods status
  shell: kubectl get pods --all-namespaces
  when: ansible_nodename == "{{knode1_hostname}}"
  register: pod_dns_status

- debug: var=pod_dns_status.stdout
  when: ansible_nodename == "{{knode1_hostname}}"


# Join slave nodes to master
- name: Run script to join slaves to cluster
  script: /tmp/token.sh
  when: ( ansible_nodename == "{{knode2_hostname}}" ) or
        ( ansible_nodename == "{{knode3_hostname}}" )
  register: slaves_join
  tags:
    - slaves_join_cluster

- debug: var=slaves_join.stdout
  when: ( ansible_nodename == "{{knode2_hostname}}" ) or
        ( ansible_nodename == "{{knode3_hostname}}" )

#Install Kubernetes dashboard

- name: Download yaml file
  command: kubectl create -f https://rawgit.com/kubernetes/dashboard/master/src/deploy/kubernetes-dashboard.yaml
  when: ansible_nodename == "{{knode1_hostname}}"

- name: Check cluster status along with dashboard
  shell: kubectl get pods --all-namespaces
  when: ansible_nodename == "{{knode1_hostname}}"
  register: output_dashboard

- debug: var=output_dashboard.stdout
  when: ansible_nodename == "{{knode1_hostname}}"

- name: List Kubernetes cluster services and nodes
  command: kubectl get rc,services,node
  when: ansible_nodename == "{{knode1_hostname}}"
  register: list_nodes

- debug: var=list_nodes.stdout
  when: ansible_nodename == "{{knode1_hostname}}"

- name: Check Cluster info
  shell: kubectl cluster-info
  when: ansible_nodename == "{{knode1_hostname}}"
  register: cluster-info

- debug: var=cluster-info.stdout
  when: ansible_nodename == "{{knode1_hostname}}"
